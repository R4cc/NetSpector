@page "/autoscan/create"
@using System.Net

@inject IUnitOfWork _uow
@inject NavigationManager Nav


@if (_scan is null || _networks is null)
{
    <a>Loading...</a>    
}
else
{
    
    <div class="container" style="max-width: 40em">
        <div class="row" style="margin-bottom: 1em;">
            <h3>Create an Autoscan</h3>
        </div>
        @if (_errorMessage is not null)
        {
            <a style="color: #ff0707">@_errorMessage</a>    
        }
        <div class="row" style="margin-bottom: 1em;">
            <h4>Network</h4>
            <RadzenDropDown AllowClear="false" TValue="int" Class="w-100" 
                            TextProperty="Name"
                            Data=@(_networks)
                            ValueProperty="NetworkId"
                            Change="@(args => OnDropDownChange(args))"/>
        </div>
        <div class="row" style="margin-bottom: 1em;">
            <h4>Schedule</h4>
            <RadzenTextBox Style="margin-left: 0.8em" @bind-Value="_scan.CronSchedule" Placeholder="50 * * * *"/>
        </div>
        <div class="row" style="margin-bottom: 1em;">
            <h4>Activate?</h4>
            <RadzenCheckBox @bind-Value="_scan.IsActive" />
        </div>
        <div class="row" >
            <div class="col">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click=CancelSubmit Style="min-width: 10em; float: right;">Cancel</RadzenButton>
            </div>
            <div class="col">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Click=ValidSubmit Style="min-width: 10em; float: right;">Save</RadzenButton>
            </div>
        </div>
    </div>
}
@code {
    private Scan _scan = new();
    private List<Network> _networks;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadNetworks();
    }

    private async Task ValidSubmit()
    {
        if (!await IsValid())
        {
            // input is invalid
            return;
        }
        
        await _uow.IScanRepository.Create(_scan);
        await _uow.SaveChangesAsync();
        Nav.NavigateTo("/autoscans");
    }

    private async Task LoadNetworks()
    {
        _networks = await _uow.INetworkRepository.GetAll();
    }
    
    private async Task CancelSubmit()
    {
        Nav.NavigateTo("/autoscans");
    }

    private async Task<bool> IsValid()
    {
        _errorMessage = string.Empty;
        return true;
    }

    private void OnDropDownChange(object value)
    {
        _scan.NetworkId = (int)value;
    }
}