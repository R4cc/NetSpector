@page "/autoscans"
@using NCrontab
@inject IUnitOfWork _uow
@inject NavigationManager nav
@inject DialogService DialogService

<PageTitle>NetSpector - Autoscans</PageTitle>

<div class="container" >
    <div class="row" style="margin-bottom: 1.5em; margin-left: 0em">
        <div class="col">
            <h1 style="font-size: 4em">Autoscans</h1>
            <RadzenButton Click=CreateScan Icon="add">New Autoscan</RadzenButton>
        </div>
    </div>
    <div class="row">
        <div class="col" style="margin-left: 1em">
            @if(_scans is not null && _scans.Count == 0)
            {
                <a>No autoscans setup...</a>
            }
        </div>
    </div>
    <div class="row">
        @if(_scans is null)
        {
            <a>Loading ...</a>
        }
        else
        {
            <div class="container" style="display: flex; flex-wrap: wrap; justify-content: flex-start; gap: 0.2em; row-gap: 2.5em;">
                @foreach(var scan in _scans)
                {
                    <div class="col" style="max-width: 25em; min-width: 25em">
                        <RadzenCard Style="width: 100%">
                            <div class="row" style="margin-bottom: 0.5em;">
                                <div class="col">
                                    <h2>@scan.Network.IpNetworkId</h2>
                                    <hr/>
                                </div>
                            </div>
                            <div class="row">
                                  <div class="col">
                                      <h4>Network Name</h4>
                                  </div>
                                  <div class="col">
                                      <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@scan.Network.Name"/>
                                  </div>
                            </div>                            
                            <div class="row">
                                  <div class="col">
                                      <h4>Next Scan</h4>
                                  </div>
                                  <div class="col">
                                      <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@(scan.NextExecute.Date == DateTime.Today ? "Today " + scan.NextExecute.ToString("H:mm") : scan.NextExecute.ToString("g"))"/>
                                  </div>
                              </div>
                              <div class="row">
                                  <div class="col">
                                      <h4>Last Scanned</h4>
                                  </div>
                                  <div class="col">
                                      <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@(scan.LastExecuted is null ? "N/A" : (scan.LastExecuted.Value.Date == System.DateTime.Today ? "Today " + System.Convert.ToDateTime(scan.LastExecuted).ToString("H:mm") : (Convert.ToDateTime(scan.LastExecuted)).ToString("g")))"/>
                                  </div>
                              </div>
                              <div class="row">
                                  <div class="col">
                                      <h4>Status</h4>
                                  </div>
                                  <div class="col-5">
                                       <RadzenSwitch Style="margin-left: -2em; vertical-align: middle" @bind-Value="scan.IsActive" Change="@(() => UpdateScan(scan))"/>
                                  </div>
                              </div>
                        </RadzenCard>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code{
    private List<Scan>? _scans;

    protected override async Task OnInitializedAsync()
    {
        await LoadScans();
    }

    private async Task LoadScans()
    {
        _scans = await _uow.IScanRepository.GetAll();
    }    

    private async Task LoadScan(int scanId)
    {
        nav.NavigateTo($"/autoscan/{scanId}");
    }
    
    private async Task CreateScan()
    {
        nav.NavigateTo($@"/autoscan/create");
    }         
    // Used for toggling activity
    private async Task UpdateScan(Scan scan)
    {
        await _uow.IScanRepository.Update(scan);
        await _uow.SaveChangesAsync();
    }        
    
    private async Task RemoveScan(Scan scan)
    {
        bool? confirmDelete = (bool)await DialogService.Confirm("Are you sure you want to delete the scan?", $"Delete {scan.Network.Name} Scan?", new ConfirmOptions() { OkButtonText = "Confirm", CancelButtonText = "Cancel" });

        if (confirmDelete is null)
            return;

        if(!(bool)confirmDelete)
            return;

        await _uow.IScanRepository.Remove(scan);
        await _uow.SaveChangesAsync();
        await LoadScans();
    }    
}